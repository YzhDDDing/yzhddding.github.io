---
---

@string{aps = {American Physical Society,}}

@inproceedings{su2024HybridTCG,
  author      = {Su, Zhuo and Yu, Zehong and Wang, Dongyan and Chang, Wanli and Gu, Bin and Jiang, Yu},
  title       = {Test Case Generation for Simulink Models using Model Fuzzing and State Solving},
  year        = {2024},
  isbn        = {9798400712487},
  publisher   = {Association for Computing Machinery},
  address     = {New York, NY, USA},
  url         = {https://doi.org/10.1145/3691620.3694991},
  doi         = {10.1145/3691620.3694991},
  abstract    = {Simulink plays an important role in the industry for modeling and synthesis of embedded systems. Ensuring system stability requires using numerous test cases to validate the functionality and safety of the models. However, as requirements increase, the complexity of the models poses new challenges to traditional testing methods. Traditional methods such as constraint solving and random search run into significant obstacles when navigating the complex branching logic and states within models.In this paper, we introduce HybridTCG, a test case generation method by collaborating model fuzzing and state solving for Simulink models. First, HybridTCG starts a code-based fuzzer to generate high-coverage test cases rapidly. Then, it refines the test cases generated by the fuzzer, preserving only those that can achieve new model coverage. These selected test cases are input into the state-solving engine to derive corresponding states and resolve the constraints of subsequent branches. Ultimately, the test cases produced by the solving engine will be fed back into the fuzzer as high-quality seeds to enhance the fuzzing process. We have implemented HybridTCG and conducted a comprehensive evaluation using various benchmark Simulink models. Compared to the built-in Simulink Design Verifier and state-of-the-art academic work SimCoTest and STCG, HybridTCG achieves an average improvement of 54\%, 108\% and 24\% on Decision Coverage, 50\%, 62\% and 6\% on Condition Coverage, 291\%, 282\% and 45\% on Modified Condition Decision Coverage, respectively. Moreover, HybridTCG is also much more efficient in testing than other tools.},
  booktitle   = {Proceedings of the 39th IEEE/ACM International Conference on Automated Software Engineering},
  pages       = {117â€“128},
  numpages    = {12},
  keywords    = {test case generation, simulink, constraint solving, model fuzzing},
  location    = {Sacramento, CA, USA},
  series      = {ASE '24},
  abbr        = {ASE '24},
  pdf         = {ASE24_HybridTCG.pdf},
  bibtex_show = {true},
  selected    = {false}
}

@inproceedings{su2024CFTCG,
  author      = {Su, Zhuo and Yu, Zehong and Wang, Dongyan and Wang, Rui and Tao, Yang and Jiang, Yu},
  title       = {CFTCG: Test Case Generation for Simulink Model through Code Based Fuzzing},
  year        = {2024},
  isbn        = {9798400706011},
  publisher   = {Association for Computing Machinery},
  address     = {New York, NY, USA},
  url         = {https://doi.org/10.1145/3649329.3656216},
  doi         = {10.1145/3649329.3656216},
  abstract    = {Simulink is extensively utilized in system design for its ability to facilitate modeling and synthesis of embedded controllers. It provides automatic test case generation to assist testers in inspecting the model. However, with the continuous increase in the model's scale, the control logic and internal states of the model are becoming more and more complex. Mainstream test case generation methods based on constraint solving and model simulation face challenges in achieving high coverage metrics.In this paper, we propose CFTCG, a fuzzing based test case generation method for Simulink models. First, CFTCG generates the fuzzing code, which includes the fuzz driver based on the model's input information and the fuzz code with model-level branch instrumentation. These codes are then compiled together to execute the model oriented fuzzing loop. During this fuzzing loop, we make use of the field information of the model inports and the coverage difference between iterative executions, allowing for more targeted input mutation. We evaluated CFTCG on several benchmark Simulink models. In comparison to the built-in Simulink Design Verifier and the state-of-the-art academic work SimCoTest, CFTCG demonstrates an average improvement of 47.2\% and 100.8\% on Decision Coverage, 38.3\% and 44.6\% on Condition Coverage, and 144.5\% and 232.4\% on Modified Condition Decision Coverage, respectively.},
  booktitle   = {Proceedings of the 61st ACM/IEEE Design Automation Conference},
  articleno   = {16},
  numpages    = {6},
  keywords    = {test case generation, simulink model, fuzzing, code generation},
  location    = {San Francisco, CA, USA},
  series      = {DAC '24},
  abbr        = {DAC '24},
  pdf         = {DAC24_CFTCG.pdf},
  bibtex_show = {true},
  selected    = {false}
}

@inproceedings{su2023STCG,
  author      = {Su, Zhuo and Yu, Zehong and Wang, Dongyan and Yang, Yixiao and Wang, Rui and Chang, Wanli and Cui, Aiguo and Jiang, Yu},
  booktitle   = {2023 60th ACM/IEEE Design Automation Conference (DAC)},
  title       = {STCG: State-Aware Test Case Generation for Simulink Models},
  year        = {2023},
  volume      = {},
  number      = {},
  pages       = {1-6},
  keywords    = {Design automation;Software packages;Benchmark testing;Space exploration;Complexity theory;System analysis and design;Test case generation;Simulink;Constraint solving},
  doi         = {10.1109/DAC56929.2023.10247787},
  abbr        = {DAC '23},
  pdf         = {DAC23_STCG.pdf},
  bibtex_show = {true},
  selected    = {true}
}

@inproceedings{cheng2024AccMoS,
  author      = {Cheng, Yifan and Yu, Zehong and Su, Zhuo and Chen, Ting and Zhang, Xiaosong and Jiang, Yu},
  title       = {AccMoS: Accelerating Model Simulation for Simulink via Code Generation},
  year        = {2024},
  isbn        = {9798400706011},
  publisher   = {Association for Computing Machinery},
  address     = {New York, NY, USA},
  url         = {https://doi.org/10.1145/3649329.3656218},
  doi         = {10.1145/3649329.3656218},
  abstract    = {Simulink has been widely used in embedded software development, which supports simulation to validate the correctness of the constructed models. However, as the scale and complexity of models in industrial applications grow, it is time-consuming for the simulation engine of Simulink to achieve high coverage and detect potential errors, especially accumulative errors.In this paper, we propose AccMoS, an accelerating model simulation method for Simulink models via code generation. AccMoS generates simulation functionality code for Simulink models through simulation oriented instrumentation, including runtime actor information collection, coverage collection, and calculation diagnosis. The final simulation code is constructed by composing all the instrumentation code with actor code generated from a predefined template library and integrating test cases import. After compiling and executing the code, AccMoS generates simulation results including coverage and diagnostic information. We implemented AccMoS and evaluated it on several benchmark Simulink models. Compared to Simulink's simulation engine, AccMoS shows a 215.3X improvement in simulation efficiency, significantly reduces the time required for detecting errors. AccMoS also achieved greater coverage within equivalent time.},
  booktitle   = {Proceedings of the 61st ACM/IEEE Design Automation Conference},
  articleno   = {21},
  numpages    = {6},
  keywords    = {model-driven design, model simulation, code generation},
  location    = {San Francisco, CA, USA},
  series      = {DAC '24},
  abbr        = {DAC '24},
  pdf         = {DAC24_AccMoS.pdf},
  bibtex_show = {true},
  selected    = {true}
}

@article{yu2024Knight,
  author      = {Yu, Zehong and Yang, Yixiao and Su, Zhuo and Wang, Rui and Tao, Yang and Jiang, Yu},
  journal     = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  title       = {Knight: Optimizing Code Generation for Simulink Models With Loop Reshaping},
  year        = {2024},
  volume      = {},
  number      = {},
  pages       = {1-1},
  keywords    = {Codes;Software packages;Analytical models;Semantics;Generators;Data models;Switches;Simulink Models;Loop-Semantic;Code Generation},
  doi         = {10.1109/TCAD.2024.3438691},
  abbr        = {TCAD '24},
  pdf         = {TCAD24_Knight.pdf},
  bibtex_show = {true},
  selected    = {true}
}

@inproceedings{yu2024Frodo,
  author      = {Yu, Zehong and Su, Zhuo and Jiang, Yu and Cui, Aiguo and Wang, Rui},
  title       = {Efficient Code Generation for Data-Intensive Simulink Models via Redundancy Elimination},
  year        = {2024},
  isbn        = {9798400706011},
  publisher   = {Association for Computing Machinery},
  address     = {New York, NY, USA},
  url         = {https://doi.org/10.1145/3649329.3656217},
  doi         = {10.1145/3649329.3656217},
  booktitle   = {Proceedings of the 61st ACM/IEEE Design Automation Conference},
  articleno   = {20},
  numpages    = {6},
  keywords    = {simulink models, data-intensive, code generation},
  location    = {San Francisco, CA, USA},
  series      = {DAC '24},
  abbr        = {DAC '24},
  pdf         = {DAC24_Frodo.pdf},
  bibtex_show = {true},
  selected    = {true}
}

@article{yu2022mercury,
  title       = {Mercury: Instruction Pipeline Aware Code Generation for Simulink Models},
  author      = {Yu, Zehong and Su, Zhuo and Yang, Yixiao and Liang, Jie and Jiang, Yu and Cui, Aiguo and Chang, Wanli and Wang, Rui},
  journal     = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume      = {41},
  number      = {11},
  pages       = {4504--4515},
  year        = {2022},
  publisher   = {IEEE},
  abbr        = {EMSOFT '22},
  dimensions  = {true},
  pdf         = {Emsoft22_Mercury.pdf},
  bibtex_show = {true},
  selected    = {true}
}

@article{su2021mdd,
  title       = {Mdd: A unified model-driven design framework for embedded control software},
  author      = {Su, Zhuo and Wang, Dongyan and Yang, Yixiao and Yu, Zehong and Chang, Wanli and Li, Wen and Cui, Aiguo and Jiang, Yu and Sun, Jiaguang},
  journal     = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  volume      = {41},
  number      = {10},
  pages       = {3252--3265},
  year        = {2021},
  selected    = {false},
  publisher   = {IEEE},
  abbr        = {TCAD '21},
  pdf         = {TCAD21_MDD.pdf},
  bibtex_show = {true}
}

@article{su2022phcg,
  title       = {PHCG: Optimizing Simulink Code Generation for Embedded System with SIMD Instructions},
  author      = {Su, Zhuo and Wang, Dongyan and Yu, Zehong and Yang, Yixiao and Jiang, Yu and Wang, Rui and Chang, Wanli and Li, Wen and Cui, Aiguo and Sun, Jiaguang},
  journal     = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  year        = {2022},
  selected    = {false},
  publisher   = {IEEE},
  abbr        = {TCAD '22},
  pdf         = {TCAD22_PHCG.pdf},
  bibtex_show = {true}
}

@inproceedings{su2022hcg,
  title       = {HCG: optimizing embedded code generation of simulink with SIMD instruction synthesis},
  author      = {Su, Zhuo and Yu, Zehong and Wang, Dongyan and Yang, Yixiao and Jiang, Yu and Wang, Rui and Chang, Wanli and Sun, Jiaguang},
  booktitle   = {Proceedings of the 59th ACM/IEEE Design Automation Conference},
  pages       = {1033--1038},
  year        = {2022},
  abbr        = {DAC '22},
  selected    = {false},
  pdf         = {DAC22_HCG.pdf},
  bibtex_show = {true}
}
